Проект "Лабиринт"
Автор Дмитрий Харьковский, SE

Для работы программы требуется библиотека pygame.
Скачать ее можно с оф.сайта http://www.pygame.org/download.shtml

На вход программе дается файл с информацией о прямоугольном лабиринте.
На выходе строится этот лабиринт и путь от старта до финиша.
#########
Формат входных данных:
В первой строчке 3 числа: количество столбцов, строк и бомб.
Во второй строчке 2 числа: координаты клетки, рядом с которой находится вход. 
В третьей строчке 2 числа : координаты клетки, рядом с которой находится вход.
Во оставшихся строчках информация о стенках:
	На каждой строчке через пробел 3 числа:
		Первые два - координаты клетки,рядом с которой строится преграда
			В случае горизонтальной стенки берутся координаты клетки, которая находится под стенкой.
			В случае вертикальной - клетки, которая справа от стенки.
		Третье число - ориентация стенки:
			0 - если стенка горизонтальная
			1 - если стенка вертикальная
Все числа целые, без знака, вводятся через пробел.
Клетки нумеруются из левого верхнего угла поля, нумерация с нуля.
#########
Алгоритм работы
Сначала строится неориентированный граф плоского лабиринта.
Потом из него строится ориентированный трехмерный граф, в которой k+1 "этаж", где k - количество бомб.
Каждый этаж - копия плоского лабиринта.
Между соседними этажами идут ребра снизу вверх между вершинами, которые разделены стенками.
Таким образом, наша задача свелась к нахождению кратчайшего маршрута из входной вершины уровня ноль к вершинам выхода любого уровня.
Для этого создаем фиктивную вершину, соединенную со всеми выходами
Далее запускаем BFS, который выдает путь без последней, то есть без фиктивной вершины.
#########
Во входном файле input.txt дан пример лабиринта, меняя количество бомб в котором можно проследить изменение маршрута.
#########
Планируется сделать:
1. Добавить обработку ситуации, когда пути к выходу не существует.
2. Добавить перекрашивание взорванных стенок в другой цвет.
3. Заменить красные кружочки на стрелочки, ориентированные по ходу движения.
4. Добавить анимацию движения {если получится}